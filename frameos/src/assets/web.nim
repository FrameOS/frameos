import tables, base64

var assets: Table[string, string]

proc getAsset*(path: string): string =
  result = assets[path].decode()

func toByteSeq(str: string): seq[byte] {.inline.} =
  ## Copy ``string`` memory into an immutable``seq[byte]``.
  let length = str.len
  if length > 0:
    result = newSeq[byte](length)
    copyMem(result[0].unsafeAddr, str[0].unsafeAddr, length)

proc getAssetToByteSeq*(path: string): seq[byte] =
  result = toByteSeq (getAsset path)

assets["assets/compiled/web/index.html"] = """PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+RnJhbWVPUzwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgYmFja2dyb3VuZDogYmxhY2s7CiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICB9CiAgICAgICAgLmltYWdlLWhvbGRlciB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgdG9wOiAwOwogICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICB3aWR0aDogMTAwdnc7CiAgICAgICAgICAgIGhlaWdodDogMTAwdmg7CiAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7CiAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7CiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogLyokc2NhbGluZ01vZGUqL2NvbnRhaW47CiAgICAgICAgICAgIC8qIHRyYW5zaXRpb246IG9wYWNpdHkgMXM7IC8vIG1ha2UgdGhpcyBjb250cm9sbGFibGUgKi8KICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIH0KICAgICAgICAjZGlzcGxheWVkSW1hZ2UgeyB3aWR0aDogMTAwJTsgfQogICAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KPGRpdiBpZD0iaW1hZ2UxIiBzdHlsZT0ib3BhY2l0eToxOyIgY2xhc3M9ImltYWdlLWhvbGRlciIgb25jbGljaz0idG9nZ2xlSW1hZ2VTaXplKCkiPjwvZGl2Pgo8ZGl2IGlkPSJpbWFnZTIiIHN0eWxlPSJvcGFjaXR5OjAiIGNsYXNzPSJpbWFnZS1ob2xkZXIiIG9uY2xpY2s9InRvZ2dsZUltYWdlU2l6ZSgpIj48L2Rpdj4KPHNjcmlwdD4gIAogICAgbGV0IGFjY2Vzc0tleSA9ICIiCiAgICBsZXQgYWNjZXNzS2V5UGFydCA9ICIiCiAgICBsZXQgc2NhbGluZ01vZGUgPSAiLyokc2NhbGluZ01vZGUqL2NvbnRhaW4iCiAgICBsZXQgcmVxdWVzdGVkU2NhbGluZyA9ICIiCgogICAgZnVuY3Rpb24gY29ubmVjdFdlYlNvY2tldCgpIHsKICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uOwogICAgICAgIHZhciB3c1Byb3RvY29sID0gbG9jLnByb3RvY29sID09PSAiaHR0cHM6IiA/ICJ3c3M6IiA6ICJ3czoiOwogICAgICAgIHZhciB3c1VSTCA9IHdzUHJvdG9jb2wgKyAiLy8iICsgbG9jLmhvc3QgKyAiL3dzIiArIGFjY2Vzc0tleVBhcnQ7CiAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHdzVVJMKTsKCiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJXZWJTb2NrZXQgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCIpOwogICAgICAgICAgICByZWZyZXNoSW1hZ2UoKTsKICAgICAgICB9OwoKICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiTWVzc2FnZSByZWNlaXZlZDoiLCBldmVudC5kYXRhKTsKICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEgPT09ICJyZW5kZXIiKSB7CiAgICAgICAgICAgICAgICByZWZyZXNoSW1hZ2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHdzLm9uZXJyb3IgPSBmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCJXZWJTb2NrZXQgRXJyb3I6IiwgZXJyb3IpOwogICAgICAgIH07CgogICAgICAgIHdzLm9uY2xvc2UgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiV2ViU29ja2V0IGNsb3NlZDoiLCBldmVudCk7CiAgICAgICAgICAgIGlmIChldmVudC5jb2RlICE9PSAxMDAwKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQXR0ZW1wdGluZyB0byByZWNvbm5lY3QuLi4iKTsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY29ubmVjdFdlYlNvY2tldCwgMzAwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEltYWdlU2l6ZSgpIHsKICAgICAgICBjb25zdCBpbWFnZTEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2UxJyk7CiAgICAgICAgY29uc3QgaW1hZ2UyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltYWdlMicpOwogICAgICAgIAogICAgICAgIGxldCBjdXJyZW50U2l6ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGltYWdlMSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1zaXplJyk7CiAgICAgICAgcmV0dXJuIGN1cnJlbnRTaXplLnRyaW0oKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2dnbGVJbWFnZVNpemUoKSB7CiAgICAgICAgY29uc3QgaW1hZ2UxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltYWdlMScpOwogICAgICAgIGNvbnN0IGltYWdlMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWFnZTInKTsKICAgICAgICAKICAgICAgICBsZXQgY3VycmVudFNpemUgPSBnZXRJbWFnZVNpemUoKQoKICAgICAgICBpZiAoY3VycmVudFNpemUgPT09ICdjb3ZlcicpIHsKICAgICAgICAgICAgaW1hZ2UxLnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2NvbnRhaW4nOwogICAgICAgICAgICBpbWFnZTIuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnY29udGFpbic7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW1hZ2UxLnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2NvdmVyJzsKICAgICAgICAgICAgaW1hZ2UyLnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2NvdmVyJzsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVmcmVzaEltYWdlKCkgewogICAgICAgIGNvbnN0IGltYWdlVXJsID0gJy9pbWFnZT90PScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIChhY2Nlc3NLZXkgPyAnJms9JyArIGVuY29kZVVSSUNvbXBvbmVudChhY2Nlc3NLZXkpIDogJycpOwogICAgICAgIGNvbnN0IHRlbXBJbWFnZSA9IG5ldyBJbWFnZSgpOwogICAgICAgIHRlbXBJbWFnZS5zcmMgPSBpbWFnZVVybDsKICAgICAgICB0ZW1wSW1hZ2Uub25sb2FkID0gKCkgPT4gewogICAgICAgICAgICBjb25zdCBuZXdJbWFnZUVsZW0gPSAocGFyc2VGbG9hdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2UxJykuc3R5bGUub3BhY2l0eSkgPT09IDEpID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltYWdlMicpIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltYWdlMScpOwogICAgICAgICAgICBjb25zdCBvbGRJbWFnZUVsZW0gPSAobmV3SW1hZ2VFbGVtLmlkID09PSAnaW1hZ2UxJykgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2UyJykgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2UxJyk7CiAgICAgICAgICAgIG5ld0ltYWdlRWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7aW1hZ2VVcmx9KWA7CiAgICAgICAgICAgIG9sZEltYWdlRWxlbS5zdHlsZS5vcGFjaXR5ID0gJzAnOwogICAgICAgICAgICBuZXdJbWFnZUVsZW0uc3R5bGUub3BhY2l0eSA9ICcxJzsKICAgICAgICB9OwogICAgfQoKICAgIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoKSB7CiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkuc3BsaXQoIiYiKS5tYXAocCA9PiBwLnNwbGl0KCI9IikpKSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09ICdrJykgewogICAgICAgICAgICAgICAgYWNjZXNzS2V5ID0gdmFsdWUKICAgICAgICAgICAgICAgIGFjY2Vzc0tleVBhcnQgPSAiP2s9IiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkKICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICJzIikgewogICAgICAgICAgICAgICAgcmVxdWVzdGVkU2NhbGluZyA9IHZhbHVlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgaWYgKChyZXF1ZXN0ZWRTY2FsaW5nLmluY2x1ZGVzKCdjb3ZlcicpICYmIHNjYWxpbmdNb2RlLmluY2x1ZGVzKCdjb250YWluJykpIHx8IChyZXF1ZXN0ZWRTY2FsaW5nLmluY2x1ZGVzKCdjb250YWluJykgJiYgc2NhbGluZ01vZGUuaW5jbHVkZXMoJ2NvdmVyJykpKSB7CiAgICAgICAgdG9nZ2xlSW1hZ2VTaXplKCkKICAgIH0KCiAgICBjb25uZWN0V2ViU29ja2V0KCk7CiAgICByZWZyZXNoSW1hZ2UoKTsKPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo="""

assets["assets/compiled/web/control.html"] = """PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+RnJhbWUgQ29udHJvbDwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgICAgaHRtbCB7CiAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIH0KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKICAgICAgICB9CiAgICAgICAgLmJhY2tncm91bmQtYWJzb2x1dGUgewogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgIHRvcDogMDsKICAgICAgICAgICAgbGVmdDogMDsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgICAgei1pbmRleDogLTE7CiAgICAgICAgICAgIG9wYWNpdHk6IDAuNTsKICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgICB9CiAgICAgICAgLmNvbnRlbnQtYmcgewogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgIHotaW5kZXg6IDE7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgICAgfQogICAgICAgIC50ZXh0LWJnIHsKICAgICAgICAgICAgbWF4LWhlaWdodDogY2FsYygxMDAlIC0gNDBweCk7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTsKICAgICAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDJweDsKICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgICAgfQogICAgPC9zdHlsZT4KICAgIDxzY3JpcHQ+CiAgICAgICAgbGV0IGF1dGhLZXkgPSAiIjsKICAgICAgICBjb25zdCBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpIHsKICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkuc3BsaXQoIiYiKS5tYXAocCA9PiBwLnNwbGl0KCI9IikpKSB7CiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnaycpIHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSAnQmVhcmVyICcgKyB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICBhdXRoS2V5ID0gdmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcG9zdFJlbmRlcigpIHsgCiAgICAgICAgICAgIGZldGNoKCcvZXZlbnQvcmVuZGVyJywgeyAKICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLCAKICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsIAogICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe30pIAogICAgICAgICAgICB9KSAKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcG9zdFNldFNjZW5lU3RhdGUoKSB7IAogICAgICAgICAgICB2YXIgZGF0YT17cmVuZGVyOnRydWUsc3RhdGU6ey8qJCRmaWVsZHNTdWJtaXRIdG1sJCQqL319OwogICAgICAgICAgICBmZXRjaCgnL2V2ZW50L3NldFNjZW5lU3RhdGUnLCB7IAogICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsIAogICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycywgCiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSAKICAgICAgICAgICAgfSk7IAogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0U2NlbmVTdGF0ZScpLnZhbHVlID0gJ05vdyB3YWl0IGEgd2hpbGUuLi4nOyAKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcG9zdFNldEN1cnJlbnRTY2VuZSgpIHsgCiAgICAgICAgICAgIHZhciBkYXRhPXtzY2VuZUlkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudFNjZW5lSWQnKS52YWx1ZX07CiAgICAgICAgICAgIGZldGNoKCcvZXZlbnQvc2V0Q3VycmVudFNjZW5lJywgeyAKICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLCAKICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsIAogICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgCiAgICAgICAgICAgIH0pOyAKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NldEN1cnJlbnRTY2VuZScpLnZhbHVlID0gJ1JlbG9hZGluZyBpbiA1JzsgCiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHsgCiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0Q3VycmVudFNjZW5lJykudmFsdWUgPSAnUmVsb2FkaW5nLi4uJzsgCiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgIH0sIDUwMDApOwogICAgICAgIH0KICAgIDwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZSI+CiAgICA8ZGl2IGNsYXNzPSJiYWNrZ3JvdW5kLWFic29sdXRlIj4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICBpZiAoYXV0aEtleSkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQud3JpdGUoJzxpZnJhbWUgc3JjPSIvP3M9Y29udGFpbiZrPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXV0aEtleSkgKyAnIiBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6MCI+PC9pZnJhbWU+Jyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC53cml0ZSgnPGlmcmFtZSBzcmM9Ii8/cz1jb250YWluIiBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6MCI+PC9pZnJhbWU+Jyk7CiAgICAgICAgICAgIH0KICAgICAgICA8L3NjcmlwdD4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29udGVudC1iZyI+CiAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1iZyI+CiAgICAgICAgICAgIDxoMj5TY2VuZTwvaDI+CiAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PSdwb3N0U2V0Q3VycmVudFNjZW5lKCk7IHJldHVybiBmYWxzZSc+PHNlbGVjdCBpZD0iY3VycmVudFNjZW5lSWQiPi8qJCRzY2VuZU9wdGlvbnNIdG1sJCQqLzwvc2VsZWN0PjxpbnB1dCB0eXBlPSdzdWJtaXQnIGlkPSJzZXRDdXJyZW50U2NlbmUiIHZhbHVlPSdTZXQgU2NlbmUnPjwvZm9ybT4KICAgICAgICAgICAgPGgyPlN0YXRlPC9oMj4KICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9J3Bvc3RTZXRTY2VuZVN0YXRlKCk7IHJldHVybiBmYWxzZSc+LyokJGZpZWxkc0h0bWwkJCovPC9mb3JtPgogICAgICAgICAgICA8aDI+QWN0aW9uczo8L2gyPgogICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD0ncG9zdFJlbmRlcigpOyByZXR1cm4gZmFsc2UnPjxpbnB1dCB0eXBlPSdzdWJtaXQnIHZhbHVlPSdSZW5kZXInPjwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4K"""


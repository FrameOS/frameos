import os
import sys
import json
from pathlib import Path

from app.codegen.scene_nim import write_scene_nim, write_scenes_nim
from app.models import Frame

if __name__ == '__main__':
    scenes_dir = Path('./scenes')
    generated_dir = Path('./generated')
    scenes = {}

    # read filter from env or argv
    filter_str = os.environ.get("SCENE_FILTER") or (sys.argv[1] if len(sys.argv) > 1 else "")
    filter_str = filter_str.strip().lower()

    generated_dir.mkdir(exist_ok=True)

    files = sorted(scenes_dir.glob('*.json'))
    if filter_str:
        files = [p for p in files if filter_str in p.stem.lower() or p.stem == "black"]

    if not files:
        print(f"No scenes matched filter: '{filter_str}'" if filter_str else "No scenes found.")
        sys.exit(0)

    for file_path in files:
        with open(file_path, 'r') as file:
            scene = json.load(file)
            scene['id'] = file_path.stem
            scene['default'] = False
            scenes[file_path.stem] = scene

    scene_list = list(scenes.values())
    scene_list.sort(key=lambda x: x['id'])
    scene_list[0]['default'] = True

    frame = Frame(
        name="Test frame",
        scenes=scene_list
    )

    for scene_name, scene_data in scenes.items():
        scene_nim = write_scene_nim(frame, scene_data)
        scene_file_path = generated_dir / f'scene_{scene_name}.nim'
        with open(scene_file_path, 'w') as scene_file:
            scene_file.write(scene_nim)

    scenes_nim = write_scenes_nim(frame)
    scenes_nim_file_path = generated_dir / 'scenes.nim'
    with open(scenes_nim_file_path, 'w') as scenes_file:
        scenes_file.write("# This file is autogenerated\n" + scenes_nim)

    print("All scenes have been saved as .nim files.")

    # update scene IDs so we could run them alongside the compiled scenes
    for scene_name, scene_data in scenes.items():
        scene_data['id'] = scene_data['id'] + '_interpreted'
        for node in scene_data.get('nodes', []):
            if node['type'] == 'scene':
                node['data']['keyword'] = node['data']['keyword'] + '_interpreted'

    # merge all scenes into one scenes.json
    merged_scenes_path = generated_dir / 'scenes.json'
    with open(merged_scenes_path, 'w') as merged_file:
        json.dump(list(scenes.values()), merged_file, indent=4)

    print("Saved scenes.json with all scenes.")
